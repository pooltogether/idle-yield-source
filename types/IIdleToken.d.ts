/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IIdleTokenInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "getAPRs()": FunctionFragment;
    "getAvgAPR()": FunctionFragment;
    "getGovTokensAmounts(address)": FunctionFragment;
    "govTokens(uint256)": FunctionFragment;
    "mintIdleToken(uint256,bool,address)": FunctionFragment;
    "openRebalance(uint256[])": FunctionFragment;
    "rebalance()": FunctionFragment;
    "rebalanceWithGST()": FunctionFragment;
    "redeemIdleToken(uint256)": FunctionFragment;
    "redeemInterestBearingTokens(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenPrice()": FunctionFragment;
    "tokenPriceWithFee(address)": FunctionFragment;
    "userAvgPrices(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAPRs", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAvgAPR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGovTokensAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "govTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintIdleToken",
    values: [BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "openRebalance",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalanceWithGST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemIdleToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemInterestBearingTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPriceWithFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userAvgPrices",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAPRs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAvgAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGovTokensAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "govTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintIdleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceWithGST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemIdleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemInterestBearingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPriceWithFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAvgPrices",
    data: BytesLike
  ): Result;

  events: {};
}

export class IIdleToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IIdleTokenInterface;

  functions: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "decimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAPRs(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { addresses: string[]; aprs: BigNumber[] }
    >;

    "getAPRs()"(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { addresses: string[]; aprs: BigNumber[] }
    >;

    getAvgAPR(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { avgApr: BigNumber }>;

    "getAvgAPR()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { avgApr: BigNumber }>;

    getGovTokensAmounts(
      _usr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _amounts: BigNumber[] }>;

    "getGovTokensAmounts(address)"(
      _usr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _amounts: BigNumber[] }>;

    govTokens(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "govTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintIdleToken(
      _amount: BigNumberish,
      _skipWholeRebalance: boolean,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintIdleToken(uint256,bool,address)"(
      _amount: BigNumberish,
      _skipWholeRebalance: boolean,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openRebalance(
      _newAllocations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "openRebalance(uint256[])"(
      _newAllocations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rebalance()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebalanceWithGST(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rebalanceWithGST()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemIdleToken(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemIdleToken(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemInterestBearingTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemInterestBearingTokens(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "token()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    "tokenPrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    tokenPriceWithFee(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenPriceWithFee(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userAvgPrices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { avgPrice: BigNumber }>;

    "userAvgPrices(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { avgPrice: BigNumber }>;
  };

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAPRs(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { addresses: string[]; aprs: BigNumber[] }
  >;

  "getAPRs()"(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { addresses: string[]; aprs: BigNumber[] }
  >;

  getAvgAPR(overrides?: CallOverrides): Promise<BigNumber>;

  "getAvgAPR()"(overrides?: CallOverrides): Promise<BigNumber>;

  getGovTokensAmounts(
    _usr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getGovTokensAmounts(address)"(
    _usr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  govTokens(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "govTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintIdleToken(
    _amount: BigNumberish,
    _skipWholeRebalance: boolean,
    _referral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintIdleToken(uint256,bool,address)"(
    _amount: BigNumberish,
    _skipWholeRebalance: boolean,
    _referral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openRebalance(
    _newAllocations: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "openRebalance(uint256[])"(
    _newAllocations: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rebalance()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebalanceWithGST(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rebalanceWithGST()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemIdleToken(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemIdleToken(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemInterestBearingTokens(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemInterestBearingTokens(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "token()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenPriceWithFee(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenPriceWithFee(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userAvgPrices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "userAvgPrices(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAPRs(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { addresses: string[]; aprs: BigNumber[] }
    >;

    "getAPRs()"(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { addresses: string[]; aprs: BigNumber[] }
    >;

    getAvgAPR(overrides?: CallOverrides): Promise<BigNumber>;

    "getAvgAPR()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGovTokensAmounts(
      _usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getGovTokensAmounts(address)"(
      _usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    govTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "govTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    mintIdleToken(
      _amount: BigNumberish,
      _skipWholeRebalance: boolean,
      _referral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintIdleToken(uint256,bool,address)"(
      _amount: BigNumberish,
      _skipWholeRebalance: boolean,
      _referral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openRebalance(
      _newAllocations: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { avgApr: BigNumber }>;

    "openRebalance(uint256[])"(
      _newAllocations: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { avgApr: BigNumber }>;

    rebalance(overrides?: CallOverrides): Promise<boolean>;

    "rebalance()"(overrides?: CallOverrides): Promise<boolean>;

    rebalanceWithGST(overrides?: CallOverrides): Promise<boolean>;

    "rebalanceWithGST()"(overrides?: CallOverrides): Promise<boolean>;

    redeemIdleToken(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemIdleToken(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemInterestBearingTokens(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeemInterestBearingTokens(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPriceWithFee(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenPriceWithFee(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userAvgPrices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userAvgPrices(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAPRs(overrides?: CallOverrides): Promise<BigNumber>;

    "getAPRs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAvgAPR(overrides?: CallOverrides): Promise<BigNumber>;

    "getAvgAPR()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGovTokensAmounts(
      _usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGovTokensAmounts(address)"(
      _usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    govTokens(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "govTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintIdleToken(
      _amount: BigNumberish,
      _skipWholeRebalance: boolean,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintIdleToken(uint256,bool,address)"(
      _amount: BigNumberish,
      _skipWholeRebalance: boolean,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openRebalance(
      _newAllocations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "openRebalance(uint256[])"(
      _newAllocations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rebalance()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebalanceWithGST(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rebalanceWithGST()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemIdleToken(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemIdleToken(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemInterestBearingTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemInterestBearingTokens(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "token()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPriceWithFee(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenPriceWithFee(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userAvgPrices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userAvgPrices(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAPRs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAPRs()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvgAPR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAvgAPR()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGovTokensAmounts(
      _usr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGovTokensAmounts(address)"(
      _usr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    govTokens(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "govTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintIdleToken(
      _amount: BigNumberish,
      _skipWholeRebalance: boolean,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintIdleToken(uint256,bool,address)"(
      _amount: BigNumberish,
      _skipWholeRebalance: boolean,
      _referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openRebalance(
      _newAllocations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "openRebalance(uint256[])"(
      _newAllocations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rebalance()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebalanceWithGST(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rebalanceWithGST()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemIdleToken(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemIdleToken(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemInterestBearingTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemInterestBearingTokens(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "token()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPriceWithFee(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenPriceWithFee(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userAvgPrices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userAvgPrices(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
